1.Synch and Foreign queries
Problem
When we sycnhronize, we may get an entity related to a non existing one. This will break foreign keys

Solution 1.
Flexible: une no foreing keys
Solution 2 (Adopted)
Set an order when synchornizing so we traverse the relation tree from bottom-top. The relations MUST be a tree, not a graph.
What we do if there is a graph? We can convert a graph to a tree deleting some edges. We will need to define soft-relations (using annotations) to break the graph to a tree. This soft edges will not use foreign keys (flexible edges).

Work to do
1. Create algorith that creates relation tree (breaks if graph) to define order of syncronization.
2. Use order in synch
3. Enable soft links

1.1 Problem on Solution 2
The above works on create and delete operations but not in modify. 
Example:
Let say we hava Post<-Comment.
We have P1<-C1. In remote we update C1 to P2<-C1- We delete P1.
If using previous algorithm we first synch the P1s and we break foreign keys (C1 has not been updated yet)

Solution 1.1
Flexible: no use of foreign keys
Solution 1.2
In synch first only update & create entities. Finnaly, delete. 

Decision:
For now we will opt for 1.1 (no use of foreign keys). However, when problem 2 is solved we may change to 1.2 if it becomes easier.



2. Download only new entities
Problem we are now downloading everything from the server in each synchronization. We could reduce the ammount of data.
Solution 1: We send date of the last update, and we obtain the new/modified items.
Problem 2.1: We need to get the deleted entities

Solution2.2: We keep track in server of deleted ids.
Solution 2.3: We ask to the server the all exiting ids.

